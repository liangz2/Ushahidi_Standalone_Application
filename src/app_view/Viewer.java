/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * incidence.java
 *
 * Created on Oct 31, 2011, 12:06:03 PM
 */
package app_view;

import app_contorller.ModelChangedListener;
import app_model.Category;
import app_model.Incident;
import app_model.IncidentList;
import app_model.MediaItem;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.EventListener;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JSpinner.DefaultEditor;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import org.openstreetmap.gui.jmapviewer.JMapViewer;

/**
 *
 * @author Zhengyi
 */
public class Viewer extends javax.swing.JFrame implements ModelChangedListener {
    private IncidentList incidents;
    private int detailCharSize = 4;
    private int previousTabIndex;
    private int viewMapHeight;
    private ImageIcon tabArrow;
    private ExecutorService exe;
    private final String programName = "Ushahidi Irene Clean Up Effort Standalone Application";

    private File imagePath;
    
    /** Creates new form incidence */
    public Viewer(IncidentList incidents) {
        initComponents();
        viewMapHeight = viewMap.getSize().height;
        tabArrow = new ImageIcon("images/tab_arrow.png");
        setSelectedTabTitle(mainPanel.getSelectedIndex());
        this.incidents = incidents;
        detailPanel.setVisible(false);
        imagePath = new File("images");
        exe = Executors.newSingleThreadExecutor();
        exe.execute((Runnable) timeLabel);
        exe.shutdown();
        
        setLocation((int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() - getWidth()) / 2, 
                (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() - getHeight()) / 2);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JTabbedPane();
        incidentSplitPane = new javax.swing.JSplitPane();
        detailPanel = new javax.swing.JPanel();
        zoomOUtButton = new javax.swing.JButton();
        zoomInButton = new javax.swing.JButton();
        detailScroll = new javax.swing.JScrollPane();
        resizePanel = new javax.swing.JPanel();
        viewMap = new org.openstreetmap.gui.jmapviewer.JMapViewer();
        detailPane = new IncidentDetail();
        titlePanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        titlePane = new IncidentTitle();
        leftButton = new javax.swing.JButton(new ImageIcon("images/left.png"));
        rightButton = new javax.swing.JButton(new ImageIcon("images/right.png"));
        pageLabel = new javax.swing.JLabel();
        updateListButton = new javax.swing.JButton();
        createIncidents = new javax.swing.JPanel();
        postTitle = new javax.swing.JTextField();
        titleLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        postButton = new javax.swing.JButton();
        descriptionScroller = new javax.swing.JScrollPane();
        postDescription = new javax.swing.JTextArea();
        timeLabel = new TimerLabel();
        jSeparator3 = new javax.swing.JSeparator();
        optionalInfoPanel = new javax.swing.JPanel();
        emailLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        newsLabel = new javax.swing.JLabel();
        postFirstName = new javax.swing.JTextField();
        postLastName = new javax.swing.JTextField();
        postEmail = new javax.swing.JTextField();
        postNews = new javax.swing.JTextField();
        postMap = new org.openstreetmap.gui.jmapviewer.JMapViewer();
        requiredPanel = new javax.swing.JPanel();
        category = new javax.swing.JLabel();
        postLocation = new javax.swing.JTextField();
        lonLabel = new javax.swing.JLabel();
        postLat = new javax.swing.JTextField();
        categoryIdCombo = new javax.swing.JComboBox();
        locationLabel = new javax.swing.JLabel();
        postLon = new javax.swing.JTextField();
        categoryTitleCombo = new javax.swing.JComboBox();
        latLabel = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        optionPanel = new javax.swing.JPanel();
        autoUpdateCheckbox = new javax.swing.JCheckBox();
        setupPanel = new javax.swing.JPanel();
        updateTimeSpinner = new javax.swing.JSpinner();
        updateLabel1 = new javax.swing.JLabel();
        udateLabel2 = new javax.swing.JLabel();
        logoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(programName);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(new ImageIcon("images/red_logo.png").getImage());

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        mainPanel.setDoubleBuffered(true);
        mainPanel.setPreferredSize(new java.awt.Dimension(100, 530));

        incidentSplitPane.setBackground(new Color(0,0,0,100));
        incidentSplitPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true), "View Incident", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        incidentSplitPane.setDividerLocation(320);
        incidentSplitPane.setPreferredSize(new java.awt.Dimension(10, 10));

        detailPanel.setPreferredSize(new java.awt.Dimension(100, 100));

        zoomOUtButton.setIcon(new ImageIcon("images/zoom_out.png"));
        zoomOUtButton.setActionCommand("zoomOut");

        zoomInButton.setIcon(new ImageIcon("images/zoom_in.png"));
        zoomInButton.setActionCommand("zoomIn");

        detailScroll.setPreferredSize(new java.awt.Dimension(669, 400));

        resizePanel.setPreferredSize(new java.awt.Dimension(600, 400));

        viewMap.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        detailPane.setBackground(new java.awt.Color(240, 240, 240));
        detailPane.setBorder(null);
        detailPane.setEditable(false);
        detailPane.setMinimumSize(new java.awt.Dimension(10, 14));
        detailPane.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout resizePanelLayout = new javax.swing.GroupLayout(resizePanel);
        resizePanel.setLayout(resizePanelLayout);
        resizePanelLayout.setHorizontalGroup(
            resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(detailPane, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
            .addComponent(viewMap, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
        );
        resizePanelLayout.setVerticalGroup(
            resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resizePanelLayout.createSequentialGroup()
                .addComponent(detailPane, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewMap, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        detailScroll.setViewportView(resizePanel);

        javax.swing.GroupLayout detailPanelLayout = new javax.swing.GroupLayout(detailPanel);
        detailPanel.setLayout(detailPanelLayout);
        detailPanelLayout.setHorizontalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailPanelLayout.createSequentialGroup()
                .addContainerGap(698, Short.MAX_VALUE)
                .addComponent(zoomOUtButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoomInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(detailScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
        );
        detailPanelLayout.setVerticalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addComponent(detailScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(zoomOUtButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zoomInButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        incidentSplitPane.setRightComponent(detailPanel);

        titlePanel.setDoubleBuffered(false);

        scrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        titlePane.setBackground(new java.awt.Color(240, 240, 240));
        titlePane.setBorder(null);
        titlePane.setEditable(false);
        titlePane.setMinimumSize(new java.awt.Dimension(10, 14));
        scrollPane.setViewportView(titlePane);

        leftButton.setActionCommand("left");
        leftButton.setEnabled(false);

        rightButton.setActionCommand("right");
        rightButton.setEnabled(false);

        pageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        updateListButton.setText("Update List");
        updateListButton.setActionCommand("updateList");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(updateListButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateListButton)))
        );

        incidentSplitPane.setLeftComponent(titlePanel);

        mainPanel.addTab("View Incidents", incidentSplitPane);

        createIncidents.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true), "Post Incident", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        createIncidents.setDoubleBuffered(false);
        createIncidents.setPreferredSize(new java.awt.Dimension(100, 452));

        titleLabel.setForeground(new java.awt.Color(255, 0, 0));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        titleLabel.setText("* Title:");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        postButton.setBackground(new Color(0,0,0,100));
        postButton.setForeground(new java.awt.Color(255, 255, 255));
        postButton.setText("Post");
        postButton.setActionCommand("post");

        descriptionScroller.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true), "* Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, null, java.awt.Color.red));

        postDescription.setColumns(20);
        postDescription.setRows(5);
        postDescription.setWrapStyleWord(true);
        postDescription.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        descriptionScroller.setViewportView(postDescription);

        timeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(0, 0, 255));
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true), "Current Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        optionalInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true), "Optional Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        emailLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        emailLabel.setText("Email Adrees:");

        lastNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lastNameLabel.setText("Last Name:");

        firstNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        firstNameLabel.setText("First Name:");

        newsLabel.setText("News Link:");

        javax.swing.GroupLayout optionalInfoPanelLayout = new javax.swing.GroupLayout(optionalInfoPanel);
        optionalInfoPanel.setLayout(optionalInfoPanelLayout);
        optionalInfoPanelLayout.setHorizontalGroup(
            optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionalInfoPanelLayout.createSequentialGroup()
                .addGroup(optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionalInfoPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(firstNameLabel)
                            .addComponent(newsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(optionalInfoPanelLayout.createSequentialGroup()
                                .addComponent(postFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                            .addComponent(postNews, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)))
                    .addGroup(optionalInfoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(emailLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(postEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)))
                .addContainerGap())
        );
        optionalInfoPanelLayout.setVerticalGroup(
            optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionalInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameLabel)
                    .addComponent(postLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameLabel))
                .addGap(21, 21, 21)
                .addGroup(optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel))
                .addGap(18, 18, 18)
                .addGroup(optionalInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postNews, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newsLabel))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        postMap.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        requiredPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true), "Required Fields", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        category.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        category.setText("Category:");

        lonLabel.setForeground(new java.awt.Color(255, 0, 0));
        lonLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lonLabel.setText("* Longitude:");

        postLat.setEditable(false);

        categoryIdCombo.setActionCommand("categoryId");

        locationLabel.setForeground(new java.awt.Color(255, 0, 0));
        locationLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        locationLabel.setText("* Location Name:");

        postLon.setEditable(false);

        categoryTitleCombo.setActionCommand("categoryTitle");

        latLabel.setForeground(new java.awt.Color(255, 0, 0));
        latLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        latLabel.setText("* Latitude:");

        javax.swing.GroupLayout requiredPanelLayout = new javax.swing.GroupLayout(requiredPanel);
        requiredPanel.setLayout(requiredPanelLayout);
        requiredPanelLayout.setHorizontalGroup(
            requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(requiredPanelLayout.createSequentialGroup()
                .addGroup(requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(requiredPanelLayout.createSequentialGroup()
                        .addComponent(locationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(postLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                    .addGroup(requiredPanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryTitleCombo, 0, 390, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(requiredPanelLayout.createSequentialGroup()
                        .addGroup(requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(requiredPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(latLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(requiredPanelLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(lonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(postLon, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                            .addComponent(postLat, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))))
                .addContainerGap())
        );
        requiredPanelLayout.setVerticalGroup(
            requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(requiredPanelLayout.createSequentialGroup()
                .addGroup(requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationLabel)
                    .addComponent(postLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryTitleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(latLabel)
                    .addComponent(postLon, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(requiredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postLat, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lonLabel))
                .addContainerGap())
        );

        postLocation.getAccessibleContext().setAccessibleParent(locationLabel);
        postLat.getAccessibleContext().setAccessibleParent(lonLabel);
        postLon.getAccessibleContext().setAccessibleParent(latLabel);

        resetButton.setBackground(new Color(0,0,0,100));
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setText("Reset");
        resetButton.setActionCommand("reset");
        resetButton.setEnabled(false);

        javax.swing.GroupLayout createIncidentsLayout = new javax.swing.GroupLayout(createIncidents);
        createIncidents.setLayout(createIncidentsLayout);
        createIncidentsLayout.setHorizontalGroup(
            createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createIncidentsLayout.createSequentialGroup()
                .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createIncidentsLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(postTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(postButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createIncidentsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createIncidentsLayout.createSequentialGroup()
                                .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(postMap, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createIncidentsLayout.createSequentialGroup()
                                        .addComponent(requiredPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(optionalInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(descriptionScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        createIncidentsLayout.setVerticalGroup(
            createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createIncidentsLayout.createSequentialGroup()
                .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(createIncidentsLayout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(postTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(titleLabel)))
                        .addComponent(postButton, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                        .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createIncidentsLayout.createSequentialGroup()
                        .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(optionalInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9))
                    .addGroup(createIncidentsLayout.createSequentialGroup()
                        .addComponent(requiredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(createIncidentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(postMap, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(descriptionScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))
                .addContainerGap())
        );

        postTitle.getAccessibleContext().setAccessibleParent(titleLabel);

        mainPanel.addTab("Post Incident", createIncidents);

        optionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true), "Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        autoUpdateCheckbox.setSelected(true);
        autoUpdateCheckbox.setText("Update Incident List Automatically");
        autoUpdateCheckbox.setActionCommand("autoUpdate");

        setupPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        updateTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 10, 1));
        ((DefaultEditor)updateTimeSpinner.getEditor()).getTextField().setEditable(false);

        updateLabel1.setText("Update every:");

        udateLabel2.setText("minutes");

        javax.swing.GroupLayout setupPanelLayout = new javax.swing.GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updateLabel1)
                .addGap(5, 5, 5)
                .addComponent(updateTimeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(udateLabel2)
                .addGap(16, 16, 16))
        );
        setupPanelLayout.setVerticalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateTimeSpinner)
                    .addComponent(updateLabel1)
                    .addComponent(udateLabel2))
                .addContainerGap())
        );

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(setupPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoUpdateCheckbox, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(873, Short.MAX_VALUE))
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoUpdateCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(503, Short.MAX_VALUE))
        );

        mainPanel.addTab("Option", optionPanel);

        logoLabel.setIcon(new ImageIcon("images/text_logo.png"));
        logoLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1039, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1190, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(561, Short.MAX_VALUE)
                .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE))
        );

        logoLabel.getAccessibleContext().setAccessibleParent(mainPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * tells the program to automatically update incident list or manually
     * @param auto 
     */
    public void setAutoUpdate(boolean auto) {
        setUpdateButtonEnabled(!auto);
        setupPanel.setVisible(auto);
        autoUpdateCheckbox.setSelected(auto);
    }
    
    /**
     * 
     * @param cycle 
     */
    public void setUpdateCycle(int cycle) {
        updateTimeSpinner.setValue(cycle);
    }
    /**
     * sets the tab size to emphasize being selected
     * @param index 
     */
    public void setSelectedTabTitle(int index) {
        previousTabIndex = index;
        String title = mainPanel.getTitleAt(index);
        
        mainPanel.setTitleAt(index, setTabSize(title));
        mainPanel.setIconAt(index, tabArrow);
    }
    
    /**
     * resets the tab size to normal while unselected
     */
    public void resetSelectedTabTitle() {
        String oldTitle = mainPanel.getTitleAt(previousTabIndex);
        mainPanel.setTitleAt(previousTabIndex, resetTabSize(oldTitle));
        mainPanel.setIconAt(previousTabIndex, null);
    }
    
    /**
     * sets the tab to desired size and look
     * @param title
     * @return String
     */
    private String setTabSize(String title) {
        return "<html><body leftmargin=15 topmargin=8 marginwidth=15 marginheight=15>"+title+"</body></html>";
    }
    
    /**
     * sets the tab back to the original look
     * @param title
     * @return String
     */
    private String resetTabSize(String title) {
        return "<html><body leftmargin=15 topmargin=8 marginwidth=30 marginheight=5>"+title+"</body></html>";
    }

    /**
     * gets the value of the cycle time off of the spinner
     * @return 
     */
    public int getUpdateCycle() {
        return (Integer) updateTimeSpinner.getValue();
    }
    
    public javax.swing.JButton getResetButton() {
        return resetButton;
    }
    /**
     * get the viewMap from Incident viewer
     * @return 
     */
    public JMapViewer getViewMap() {
        return viewMap;
    }
    /**
     * returns the program name
     * @return String
     */
    public String getProgramName() {
        return programName;
    }
    
    /**
     * gets the titlePane editor
     * @return 
     */
    public EditorKit getTitleEditorKit() {
        return titlePane.getEditorKit();
    }
    
    /**
     * get the reference of the latitude text field
     * @return 
     */
    public javax.swing.JTextField getPostLatitude() {
        return postLon;
    }
    
    /**
     * get the reference of the longitude text field
     * @return 
     */
    public javax.swing.JTextField getPostLongitude() {
        return postLat;
    }
    /**
     * returns the document of the title pane
     * @return 
     */
    public Document getTitleDocument() {
        return titlePane.getDocument();
    }
    public javax.swing.JCheckBox getAutoUpdateBox() {
        return autoUpdateCheckbox;
    }
    
    public JMapViewer getPostMap() {
        return postMap;
    }
    /**
     * returns the attributes of the post incident
     * @return 
     */
    public String getPostIncidentAttributes() {
        TimerLabel time = (TimerLabel) timeLabel;
        String attributes = "task=report";
        // get all available parameters
        String title = postTitle.getText();
        String description = postDescription.getText();
        String date = time.getDate();
        String hour = time.getHour();
        String minute = time.getMinute();
        String ampm = time.getAMPM();
        String categoryId = (String) categoryIdCombo.getSelectedItem();
        String latitude = postLon.getText();
        String longitude = postLat.getText();
        String locationName = postLocation.getText();
        String firstName = postFirstName.getText();
        String lastName = postLastName.getText();
        String email = postEmail.getText();
        String newsLink = postNews.getText();
        // end of getting parameters
        
        // make sure all required fields are filled
        if (title.isEmpty() || description.isEmpty() || latitude.isEmpty() ||
                longitude.isEmpty() || locationName.isEmpty()) {
            if (title.isEmpty())
                postTitle.setToolTipText("This field cannot be empty");
            if (description.isEmpty())
                postDescription.setToolTipText("This field cannot be empty");
            if (latitude.isEmpty())
                postLon.setToolTipText("This field cannot be empty");
            if (longitude.isEmpty())
                postLat.setToolTipText("This field cannot be empty");
            if (locationName.isEmpty())
                postLocation.setToolTipText("This field cannot be empty");
            
            return null;
        }
        else {
            // setup the required attribute string
            attributes += "&incident_title=" + title +
                    "&incident_description=" + description +
                    "&incident_date=" + date +
                    "&incident_hour=" + hour +
                    "&incident_minute=" + minute +
                    "&incident_ampm=" + ampm.toLowerCase() +
                    "&incident_category=" + categoryId +
                    "&latitude=" + latitude +
                    "&longitude=" + longitude +
                    "&location_name=" + locationName;
            // end of setting up string
            
            // add optional parameters
            if (!firstName.isEmpty())
                attributes += "&person_first=" + firstName;
            
            if (!lastName.isEmpty())
                attributes += "&person_last=" + lastName;
            
            if (!email.isEmpty())
                attributes += "&person_email=" + email;
            
            if (!newsLink.isEmpty())
                attributes += "&incident_news=" + newsLink;
            // end of adding param
        }
        return attributes += "&resp=xml";
    }
    
    /**
     * fills up the incident combo box with specific array
     * @param categories 
     */
    public void fillCategoryTitleCombo(Object[] categories) {
        categoryTitleCombo.setModel(new DefaultComboBoxModel(categories));
    }
    
    /**
     * fills up the incident id combo box with specific array
     * @param id 
     */
    public void fillCategoryIdCombo(Object[] id) {
        categoryIdCombo.setModel(new DefaultComboBoxModel(id));
    }
    
    /**
     * enable/disable the updateListButton
     * @param enable 
     */
    public void setUpdateButtonEnabled(boolean enable) {
        updateListButton.setEnabled(enable);
    }
    
    /**
     * resets the posting form to empty state
     */
    public void resetPostForm() {
        // reset text field
        postTitle.setText("");
        postDescription.setText("");
        postLocation.setText("");
        postLat.setText("");
        postLon.setText("");
        
        // reset labels
        titleLabel.setText("* Title");
        titleLabel.setForeground(Color.red);
        TitledBorder border = (TitledBorder) descriptionScroller.getBorder();
        border.setTitle("* Description");
        border.setTitleColor(Color.red);
        descriptionScroller.repaint();
        locationLabel.setText("* Location Name");
        locationLabel.setForeground(Color.red);
        latLabel.setText("* Latitude");
        latLabel.setForeground(Color.red);
        lonLabel.setText("* Longitude");
        lonLabel.setForeground(Color.red);
        
        // reset map
        postMap.removeAllMapMarkers();
        postMap.setDisplayPositionByLatLon(0.0, 0.0, 1);
        // end of reseting
    }
    /**
     * sets the category id combobox to match the title
     */
    public void setCategoryIdIndex() {
        int titleIndex = categoryTitleCombo.getSelectedIndex();
        categoryIdCombo.setSelectedIndex(titleIndex);
    }
    
    /**
     * sets the category title combobox to match the id
     */
    public void setCategoryTitleIndex() {
        int idIndex = categoryIdCombo.getSelectedIndex();
        categoryTitleCombo.setSelectedIndex(idIndex);
    }
    /**
     * hides/shows the incident info panel
     */
    public void setDetailPanelVisible(boolean show) {
        detailPanel.setVisible(show);
    }
    
    /**
     * show a window to inform the result of a post
     * @param message
     * @param seccess 
     */
    public void showPostingMessage(String message, boolean seccess) {
        if (seccess)
            JOptionPane.showMessageDialog(this, message, "Seccess", JOptionPane.INFORMATION_MESSAGE);
        else
            displayErrorMessage(message);
    }
    
    /**
     * Sets the incident detail character size
     */
    public void incrementCharSize() {
        detailCharSize++;
    }
    public void decrementCharSize() {
        detailCharSize--;
    }
    
    /**
     * tell which index of the incident to display
     * @param index 
     */
    public void updateDetailPane(int index) {
        try {
            // display result
            ((IncidentDetail) detailPane).showIncidentDetail(index);
            // set the size of the panel to fit the text and the map together
            Rectangle view = detailPane.modelToView(detailPane.getDocument().getLength());
            resizePanel.setPreferredSize(new Dimension(view.x, view.y + viewMapHeight + 20));
        } catch (BadLocationException ex) {
            Logger.getLogger(Viewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Viewer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * add hyperlink listener to the title pane
     * @param listener 
     */
    public void addHyperlinkListener(HyperlinkListener listener) {
        titlePane.addHyperlinkListener(listener);
    }
    
    /**
     * add hyperlink listener to the detail pane
     * @param listener 
     */
    public void addDetailPaneHyperLinkListener(HyperlinkListener listener) {
        detailPane.addHyperlinkListener(listener);
    }
    
    /**
     * add ActionListeners to all buttons
     * @param al 
     */
    public void addButtonActionListener(EventListener al) {
        leftButton.addActionListener((ActionListener) al);
        rightButton.addActionListener((ActionListener) al);
        zoomInButton.addActionListener((ActionListener) al);
        zoomOUtButton.addActionListener((ActionListener) al);
        postButton.addActionListener((ActionListener) al);
        updateListButton.addActionListener((ActionListener) al);
        autoUpdateCheckbox.addActionListener((ActionListener) al);
        resetButton.addActionListener((ActionListener) al);
        mainPanel.addChangeListener((ChangeListener) al);
        updateTimeSpinner.addChangeListener((ChangeListener) al);
    }
    
    /**
     * add ActionListener to all combo boxes
     * @param el 
     */
    public void addComboxListener(ActionListener el) {
        categoryTitleCombo.addActionListener(el);
        categoryIdCombo.addActionListener(el);
    }
    
    /**
     * add KeyListener to all text fields
     * @param kl 
     */
    public void addTextFieldListener(KeyListener kl) {
        postTitle.addKeyListener(kl);
        postLon.addKeyListener(kl);
        postLat.addKeyListener(kl);
        postDescription.addKeyListener(kl);
        postLocation.addKeyListener(kl);
    }
    
    /**
     * adds the mouse listener to the logo
     * @param ml 
     */
    public void addLogoLabelListener(MouseListener ml) {
        logoLabel.addMouseListener(ml);
    }
    
    /**
     * 
     */
    @Override
    public void modelChanged() {
        try {
            ((IncidentTitle) titlePane).showTitles();
        } catch (BadLocationException ex) {
            Logger.getLogger(Viewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Viewer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * shows a JOptionPane of error message
     * @param err 
     */
    public void displayErrorMessage(String err) {
        JOptionPane.showMessageDialog(this, err, "Failure", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * IncidentTitle class that extends JEditorPane to provide desired
     * functionality
     */
    private class IncidentTitle extends JEditorPane {
        private HTMLEditorKit htmlEditor;
        private HTMLDocument htmlDoc;
        
        public IncidentTitle() {
            super();
            htmlEditor = new HTMLEditorKit();
            htmlDoc = new HTMLDocument();
            
            setEditorKit(htmlEditor);
            setDocument(htmlDoc);
        }
        
        /**
         * shows all titles of available incidents
         * @throws BadLocationException
         * @throws IOException 
         */
        private void showTitles() throws BadLocationException, IOException {
            if (incidents.getCurrentPage() != 1)
                leftButton.setEnabled(true);
            else
                leftButton.setEnabled(false);
            if (incidents.getCurrentPage() == incidents.getMaxPage())
                rightButton.setEnabled(false);
            else
                rightButton.setEnabled(true);
            // set buttons according to the current page number
            
            int start = incidents.getCurrentPage() * incidents.getIncidentNumberPerPage() - incidents.getIncidentNumberPerPage();
            int end = incidents.getSize() - start >= incidents.getIncidentNumberPerPage() ? 
                    start + incidents.getIncidentNumberPerPage() : incidents.getSize();
            
            htmlDoc.remove(0, htmlDoc.getLength());   // clear the page first

            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<html><body>", 0, 0, null);
            
            for (int i = start; i < end; i++) {
                    htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<p><font size = '4'><a href = '" + i + "'>"
                            + (i + 1) + ". " + incidents.getIncident(i).getTitle() + "</a></font><hr/></p>", 0, 0, null);
                    setCaretPosition(getDocument().getLength());
            }
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "</body></html>", 0, 0, null);
            setCaretPosition(0); // go back to the top of the page
            String currentPage = Integer.toString(incidents.getCurrentPage());
            String totalPage = Integer.toString(incidents.getMaxPage());
            pageLabel.setText("Page: " + currentPage + "/" + totalPage);
        }
        
        public void errorMessage(String err) throws BadLocationException, IOException {
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<html><h1>" + err + "</h1></html>", 0, 0, null);
        }
    }
    
    /**
     * 
     */
    public class IncidentDetail extends JEditorPane {
        private HTMLDocument htmlDoc;
        private HTMLEditorKit htmlEditor;
        
        public IncidentDetail() {
            super();
            htmlDoc = new HTMLDocument();
            htmlEditor = new HTMLEditorKit();
            
            setEditorKit(htmlEditor); 
            setDocument(htmlDoc);
        }

        
        public void showIncidentDetail(int index) throws BadLocationException, IOException {
            htmlDoc.remove(0, htmlDoc.getLength()); // clear the panel
            if (index == -1)
                return;
            
            if (incidentSplitPane.getDividerLocation() >= incidentSplitPane.getMaximumDividerLocation() ||
                    incidentSplitPane.getDividerLocation() <= incidentSplitPane.getMinimumDividerLocation())
                incidentSplitPane.setDividerLocation(0.3);
            
            Incident incident = incidents.getIncident(index); // obtain the incident from the list
            
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<html><body align = 'center'>", 0, 0, null); // html beginning tag
            
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<font color = 'red' size = '" + (detailCharSize + 2) + "'>" + incident.getTitle() + "</font><br>", 0, 0, null); // title
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<img src = 'file:" + imagePath.getAbsolutePath() + "\\clock.png' width = '12' height = '12' />" +  
                    "<font color = '996600'size = '" + (detailCharSize + 1) + "'><i>" + incident.getDate() + 
                    "&nbsp;&nbsp;&nbsp<img src = 'file:" + imagePath.getAbsolutePath() + "\\location.png' width = '12' height = '12' />" + 
                    incident.getLocation().getName() + "</i></font><br>", 0, 0, null); // date and imagePath
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<font color = 'blue' size = '"+ (detailCharSize + 1) + "'> Incident ID: " + incident.getId() + "</font><br>", 0, 0, null); // id
            // categories
            String categories = "";
            for (Category category: incident.getCategory())
                categories += categoryColor(category.getTitle(), category.getColor());
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(),"<b>Category: " + categories + "</b>", 0, 0, null);
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<hr/><br><p><font size = '" + (detailCharSize + 1) + "'>" + incident.getDescription() + "</font></p><hr/><br>", 0, 0, null); // description
            // media links
            for (MediaItem media: incident.getMediaItems()) {
                if (media != null)
                    htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "<u><font color = 'blue' size = '" + (detailCharSize + 1) + "'><a href='" + media.getLink() + "'>" + media.getLink() + "</a></font></u><br>", 0, 0, null);
            }
            // end of each incident
            htmlEditor.insertHTML(htmlDoc, htmlDoc.getLength(), "</body></html>", 0, 0, null); // html ending tag
            
            setCaretPosition(0);
        }
        
        /**
         * simple function that all adds categories together into one string
         * @param cat
         * @param color
         * @return 
         */
        private String categoryColor(String cat, String color) {
            return "<font size = '" + (detailCharSize + 1) + "' color = '" + color + "'>" + cat + " </font>";
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoUpdateCheckbox;
    private javax.swing.JLabel category;
    private javax.swing.JComboBox categoryIdCombo;
    private javax.swing.JComboBox categoryTitleCombo;
    private javax.swing.JPanel createIncidents;
    private javax.swing.JScrollPane descriptionScroller;
    private javax.swing.JEditorPane detailPane;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JScrollPane detailScroll;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JSplitPane incidentSplitPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel latLabel;
    private javax.swing.JButton leftButton;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JLabel lonLabel;
    private javax.swing.JTabbedPane mainPanel;
    private javax.swing.JLabel newsLabel;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JPanel optionalInfoPanel;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JButton postButton;
    private javax.swing.JTextArea postDescription;
    private javax.swing.JTextField postEmail;
    private javax.swing.JTextField postFirstName;
    private javax.swing.JTextField postLastName;
    private javax.swing.JTextField postLat;
    private javax.swing.JTextField postLocation;
    private javax.swing.JTextField postLon;
    private org.openstreetmap.gui.jmapviewer.JMapViewer postMap;
    private javax.swing.JTextField postNews;
    private javax.swing.JTextField postTitle;
    private javax.swing.JPanel requiredPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel resizePanel;
    private javax.swing.JButton rightButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel setupPanel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JEditorPane titlePane;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel udateLabel2;
    private javax.swing.JLabel updateLabel1;
    private javax.swing.JButton updateListButton;
    private javax.swing.JSpinner updateTimeSpinner;
    private org.openstreetmap.gui.jmapviewer.JMapViewer viewMap;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOUtButton;
    // End of variables declaration//GEN-END:variables
}
